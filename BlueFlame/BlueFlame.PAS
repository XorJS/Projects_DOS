PROGRAM BLUEFLAME;

TYPE FLAMES_BLOCK = ARRAY[0..99,0..79] OF BYTE;
VAR FLAMES_SCREEN : ^FLAMES_BLOCK;
VAR PALETTE : ARRAY[0..767] OF BYTE;
VAR KEYB:BYTE;

PROCEDURE INIT_MODE_X;
ASSEMBLER;
ASM
 MOV AX,0013H
 INT 10H
 MOV DX,03C4H
 XOR AH,AH
 MOV AL,04
 OUT DX,AL
 MOV DX,03C5H
 IN AL,DX
 XOR AL,00001000B
 OUT DX,AL
 MOV DX,03C4H
 MOV AL,04H
 OUT DX,AL
 MOV DX,03C5H
 IN AL,DX
 AND AL,11110111B
 OR AL,04h
 OUT DX,AL
 MOV DX,03D4H
 MOV AL,14H
 OUT DX,AL
 MOV DX,03D5H
 IN AL,DX
 AND AL,10111111B
 OUT DX,AL
 MOV DX,03D4H
 MOV AL,17H
 OUT DX,AL
 MOV DX,03D5H
 IN AL,DX
 OR AL,01000000B
 OUT DX,AL
 MOV DX,03C4H
 MOV AH,1111B
 MOV AL,02H
 OUT DX,AX
 MOV AX,0A000H
 MOV ES,AX
 XOR SI,SI
 XOR DI,DI
 XOR AX,AX
 CLD
 MOV CX,0FFFFH
 REP STOSW
END;

PROCEDURE FLAMES_PAL;
 VAR COMPT:BYTE;
BEGIN
FOR COMPT:=000 TO 063 DO BEGIN
 PALETTE[3*COMPT+2]:=(4*COMPT) SHR 2;
 PALETTE[3*(COMPT+064)+2]:=(63-COMPT)*4 SHR 2;
 PALETTE[3*(COMPT+128)+2]:=(4*COMPT) SHR 2;
 PALETTE[3*(COMPT+192)+2]:=(63-COMPT)*4 SHR 2;
END;
 ASM
  PUSH SI
  MOV SI,OFFSET PALETTE
  MOV DX,03C8H
  MOV CX,3*256
  OUT DX,AL
  INC DX
  REP OUTSB
  POP SI
 END;
END;

PROCEDURE MEM0A000H;
ASSEMBLER;
 LABEL INV_LOOP;
ASM
 CLD
 MOV AX,0A000H
 MOV ES,AX
 PUSH DS
 LDS SI,FLAMES_SCREEN
 MOV DI,80*106
 MOV CX,80*094/4
 DB 66H
 REP MOVSW
 POP DS
 PUSH DS
 LDS SI,FLAMES_SCREEN
 MOV SI,80*094
 MOV DI,80*000
 MOV CX,80*100
 INV_LOOP:
 STD
 LODSB
 CLD
 STOSB
 DEC CX
 JNE INV_LOOP
 POP DS
END;

PROCEDURE CLEAR;
ASSEMBLER;
ASM
 LES DI,FLAMES_SCREEN;
 XOR SI,SI
 XOR DI,DI
 XOR AX,AX
 CLD
 MOV CX,0FFFFh
 REP STOSW
END;

PROCEDURE SMOOTH_AND_UP;
ASSEMBLER;
 LABEL BOUCLE1,BOUCLE2;
ASM
 CLD
 PUSH DS
 LES DI,FLAMES_SCREEN
 LDS SI,FLAMES_SCREEN
 ADD SI,80
 MOV CX,80*98
 XOR BX,BX
 XOR AX,AX
BOUCLE1:
 XOR AX,AX
 MOV BL,[SI-79]
 ADD AX,BX
 MOV BL,[SI-80]
 ADD AX,BX
 MOV BL,[SI-81]
 ADD AX,BX
 MOV BL,[SI-01]
 ADD AX,BX
 MOV BL,[SI+01]
 ADD AX,BX
 MOV BL,[SI+79]
 ADD AX,BX
 MOV BL,[SI+80]
 ADD AX,BX
 MOV BL,[SI+81]
 ADD AX,BX
 SHR AX,3
 OR AX,AX
 JE BOUCLE2
 DEC AL
BOUCLE2:
 STOSB
 INC SI
 DEC CX
JNE BOUCLE1
 POP DS
END;

PROCEDURE MAKE_FLAMES;
 VAR ABSCIVE_RND:WORD;COMPT:BYTE;
BEGIN
FOR COMPT:=0 TO 79 DO BEGIN
  FLAMES_SCREEN^[97,COMPT]:=RANDOM(256);
  FLAMES_SCREEN^[98,COMPT]:=RANDOM(128);
  FLAMES_SCREEN^[99,COMPT]:=RANDOM(064);
  FLAMES_SCREEN^[96+RANDOM(3),RANDOM(80)]:=0;
END;
 FOR COMPT:=0 TO RANDOM(16) DO BEGIN
  ABSCIVE_RND:=RANDOM(80);
  ASM
   LES DI,FLAMES_SCREEN
   ADD DI,98*80
   ADD DI,ABSCIVE_RND
   MOV AX,0FFFFh
   MOV ES:[DI-80],AX
   MOV ES:[DI-01],AX
   MOV ES:[DI],AX
   MOV ES:[DI+01],AX
   MOV ES:[DI+80],AX
  END;
 END;
END;

BEGIN
 RANDOMIZE;
 GETMEM(FLAMES_SCREEN,8000);
 CLEAR;
 INIT_MODE_X;
 FLAMES_PAL;
 
 REPEAT
  SMOOTH_AND_UP;
  MAKE_FLAMES;
  MEM0A000H;
  ASM
   XOR AX,AX
   IN AL,60H
   MOV BYTE PTR KEYB,AL
  END;
 UNTIL (KEYB = 1);

 ASM 
  MOV AX,03H;
  INT 10H 
 END;

 FREEMEM(FLAMES_SCREEN,8000);
 
END.
